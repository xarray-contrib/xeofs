# -*- coding: utf-8 -*-
#
# Configuration file for the Sphinx documentation builder.
#
# This file does only contain a selection of the most common options. For a
# full list see the documentation:
# http://www.sphinx-doc.org/en/master/config

# -- Path setup --------------------------------------------------------------

# If extensions (or modules to document with autodoc) are in another directory,
# add these directories to sys.path here. If the directory is relative to the
# documentation root, use os.path.abspath to make it absolute, like shown here.
#
import os
import sys

from xeofs import __version__

sys.path.insert(0, os.path.abspath(".."))


# # prevent circular imports...
# import sphinx.builders.html
# import sphinx.builders.latex
# import sphinx.builders.texinfo
# import sphinx.builders.text
# import sphinx.ext.autodoc

# -- Project information -----------------------------------------------------

project = "xeofs"
copyright = "2022 - 2024, Niclas Rieger"
author = "Niclas Rieger"

# The short X.Y version
# version = importlib.metadata.version('xeofs')
# The full version, including alpha/beta/rc tags
release = __version__


# -- General configuration ---------------------------------------------------

# If your documentation needs a minimal Sphinx version, state it here.
#
# needs_sphinx = '1.0'

# Add any Sphinx extension module names here, as strings. They can be
# extensions coming with Sphinx (named 'sphinx.ext.*') or your custom
# ones.
extensions = [
    "sphinx.ext.napoleon",
    # "sphinx.ext.autodoc",
    "sphinx.ext.autosummary",
    "sphinx_gallery.gen_gallery",
    "sphinx_design",
    "nbsphinx",
    "sphinx_copybutton",
    "myst_parser",  # markdown support
]
autosummary_generate = True  # Turn on sphinx.ext.autosummary


add_module_names = False
toc_object_entries_show_parents = "hide"
show_title_parents = False

# Sphinx-gallery stuff
sphinx_gallery_conf = {
    "examples_dirs": "content/user_guide/examples",  # path to your example scripts
    "gallery_dirs": "content/user_guide/auto_examples",  # path to where to save gallery generated output
}

# Add any paths that contain templates here, relative to this directory.
templates_path = ["_templates"]

# The suffix(es) of source filenames.
# You can specify multiple suffix as a list of string:
#
# source_suffix = ['.rst', '.md']
source_suffix = ".rst"

# The master toctree document.
master_doc = "index"

# The language for content autogenerated by Sphinx. Refer to documentation
# for a list of supported languages.
#
# This is also used if you do content translation via gettext catalogs.
# Usually you set "language" from the command line for these cases.
language = "en"

# List of patterns, relative to source directory, that match files and
# directories to ignore when looking for source files.
# This pattern also affects html_static_path and html_extra_path.
exclude_patterns = [
    "_build",
    "Thumbs.db",
    ".DS_Store",
    # exclude .py and .ipynb files in auto_examples generated by sphinx-gallery
    # this is to prevent sphinx from complaining about duplicate source files
    "content/user_guide/auto_examples/**/*.py",
    "content/user_guide/auto_examples/**/*.ipynb",
]

# The name of the Pygments (syntax highlighting) style to use.
pygments_style = None


# -- Options for HTML output -------------------------------------------------

# The theme to use for HTML and HTML Help pages.  See the documentation for
# a list of builtin themes.
#
html_theme = "pydata_sphinx_theme"

html_context = {
    # ...
    "default_mode": "dark"
}

# Theme options are theme-specific and customize the look and feel of a theme
# further.  For a list of options available for each theme, see the
# documentation.
#
html_theme_options = {
    "show_nav_level": 1,
    "icon_links": [
        {
            # Label for this link
            "name": "GitHub",
            # URL where the link will redirect
            "url": "https://github.com/xarray-contrib/xeofs",  # required
            # Icon class (if "type": "fontawesome"), or path to local image (if "type": "local")
            "icon": "fa-brands fa-square-github",
            # The type of image to be used (see below for details)
            "type": "fontawesome",
        }
    ],
}

html_logo = "./logos/xeofs_logo_icon.png"
html_favicon = "./logos/favicon.ico"
# Add any paths that contain custom static files (such as style sheets) here,
# relative to this directory. They are copied after the builtin static files,
# so a file named "default.css" will overwrite the builtin "default.css".
html_static_path = ["_static"]
html_css_files = ["custom.css"]

# Custom sidebar templates, must be a dictionary that maps document names
# to template names.
#
# The default sidebars (for documents that don't match any pattern) are
# defined by theme itself.  Builtin themes are using these templates by
# default: ``['localtoc.html', 'relations.html', 'sourcelink.html',
# 'searchbox.html']``.
#
# html_sidebars = {}


# -- Options for HTMLHelp output ---------------------------------------------

# Output file base name for HTML help builder.
htmlhelp_basename = "xeofsdoc"


# -- Options for LaTeX output ------------------------------------------------

latex_elements = {
    # The paper size ('letterpaper' or 'a4paper').
    #
    # 'papersize': 'letterpaper',
    # The font size ('10pt', '11pt' or '12pt').
    #
    # 'pointsize': '10pt',
    # Additional stuff for the LaTeX preamble.
    #
    # 'preamble': '',
    # Latex figure (float) alignment
    #
    # 'figure_align': 'htbp',
}

# Grouping the document tree into LaTeX files. List of tuples
# (source start file, target name, title,
#  author, documentclass [howto, manual, or own class]).
latex_documents = [
    (master_doc, "xeofs.tex", "xeofs Documentation", "Niclas Rieger", "manual"),
]


# -- Options for manual page output ------------------------------------------

# One entry per manual page. List of tuples
# (source start file, name, description, authors, manual section).
man_pages = [(master_doc, "xeofs", "xeofs Documentation", [author], 1)]


# -- Options for Texinfo output ----------------------------------------------

# Grouping the document tree into Texinfo files. List of tuples
# (source start file, target name, title, author,
#  dir menu entry, description, category)
texinfo_documents = [
    (
        master_doc,
        "xeofs",
        "xeofs Documentation",
        author,
        "xeofs",
        "Comprehensive EOF analysis in Python.",
        "Miscellaneous",
    ),
]


# -- Options for Epub output -------------------------------------------------

# Bibliographic Dublin Core info.
epub_title = project

# The unique identifier of the text. This can be a ISBN number
# or the project homepage.
#
# epub_identifier = ''

# A unique identification for the text.
#
# epub_uid = ''

# A list of files that should not be packed into the epub file.
epub_exclude_files = ["search.html"]


# Remove parents from titles in all .rst files
def shorten_titles(app):
    # Recursively crawl through source directory and shorten titles in .rst files
    def crawl_source_shorten_titles(path):
        # List files in directory
        for file_name in os.listdir(path):
            # Build path to file
            file_path = os.path.join(path, file_name)

            # Recursively crawl to next directory level
            if os.path.isdir(file_path):
                crawl_source_shorten_titles(file_path)

            # Modify .rst source file title
            else:
                _, extension = os.path.splitext(file_path)
                if extension == ".rst":
                    # Read file, modify title, write back to file
                    with open(file_path, "r") as file:
                        lines = file.readlines()
                    lines[0] = lines[0].split(".")[-1]
                    lines[1] = ("=" * (len(lines[0]) - 1)) + "\n"
                    print(f"Shortened title in {file_path}")
                    with open(file_path, "w") as file:
                        file.writelines(lines)

    path = os.path.join(
        os.path.abspath(".."), "docs/content/api_reference/_autosummary"
    )
    crawl_source_shorten_titles(path)


# Connect to sphinx events (see https://www.sphinx-doc.org/en/master/extdev/event_callbacks.html#events)
# to shorten titles in all .rst files after the sphinx autosummary extension has run
# (otherwise the titles would be overwritten by the autosummary extension)
def setup(app):
    app.connect("builder-inited", shorten_titles)
